###########################################
#here filter it by cols of interest
###########################################
df2 = df[,colnames(df) %in% cols_interested]
df2$ID = df2$Sample
out_df = df2
out_df$Sample= NULL
# reorded columns to have ID - pheno - confounders
tmp = data.frame('ID' = out_df$ID )
out_df$ID =NULL
out_df= cbind(tmp,out_df)
# remove columns with only 1 level or constants
# remove columns with only 1 level or constants
for (i in colnames(out_df)){
if ( is.factor(out_df[[i]])){
out_df[[i]] = as.factor(out_df[[i]])
out_df[[i]] <- droplevels(out_df[[i]])
if (length(levels(out_df[[i]])) < 2){
cat('Removing covariate because constant\n')
print(i)
out_df[[i]] = NULL
}
}
}
#Remove all NAs as probably missing cols that would screw up all the matrix
out_df <- Filter(function(x)!all(is.na(x)), out_df)
if (my_pheno != 'none'){
# this case is because these are binary phenotypes and we only want 0/1
out_df = out_df[out_df[[my_pheno]] %in% c(0,1),]
# check that at least there are 10 samples per class to proceed further
pheno_table = table(out_df[[my_pheno]])
print(out_df[[my_pheno]])
if (pheno_table[['0']] >=10 & pheno_table[['1']] >=10) {
out_df = out_df}else{
print('Cannot proceed : there are not enough positive and negative samples')
print('Aborting')
stop()
}
}
out_df = out_df[complete.cases(out_df),]
return(out_df)
}
nearZeroVar <- function (x, freqCut = 95/5, uniqueCut = 10, saveMetrics = FALSE, names = FALSE, foreach = FALSE, allowParallel = TRUE) {
if(!foreach) return(nzv(x, freqCut = freqCut, uniqueCut = uniqueCut, saveMetrics = saveMetrics, names = names))
`%op%` <- getOper(foreach && allowParallel && getDoParWorkers() > 1)
if(saveMetrics) {
res <- foreach(name = colnames(x), .combine=rbind) %op% {
r <- nzv(x[[name]], freqCut = freqCut, uniqueCut = uniqueCut, saveMetrics = TRUE)
r[,"column" ] <-  name
r
}
res <- res[, c(5, 1, 2, 3, 4)]
rownames(res) <- as.character(res$column)
res$column <- NULL
} else {
res <- foreach(name = colnames(x), .combine=c) %op% {
r <- nzv(x[[name]], freqCut = freqCut, uniqueCut = uniqueCut, saveMetrics = FALSE)
## needed because either integer() or 1, r is never 0
if (length(r) > 0 && r == 1) TRUE else FALSE
}
res <- which(res)
if(names){
res <- colnames(x)[res]
}
}
res
}
nzv <- function (x, freqCut = 95/5, uniqueCut = 10, saveMetrics = FALSE, names = FALSE)
{
if (is.null(dim(x))) x <- matrix(x, ncol = 1)
freqRatio <- apply(x, 2, function(data)
{
t <- table(data[!is.na(data)])
if (length(t) <= 1) {
return(0);
}
w <- which.max(t);
return(max(t, na.rm=TRUE)/max(t[-w], na.rm=TRUE))
})
lunique <- apply(x, 2, function(data) length(unique(data[!is.na(data)])))
percentUnique <- 100 * lunique / apply(x, 2, length)
zeroVar <- (lunique == 1) | apply(x, 2, function(data) all(is.na(data)))
if (saveMetrics)
{
out <- data.frame(freqRatio = freqRatio,
percentUnique = percentUnique,
zeroVar = zeroVar,
nzv = (freqRatio > freqCut & percentUnique <= uniqueCut) | zeroVar | (freqRatio == 0 & percentUnique <= uniqueCut))
}
else {
out <- which((freqRatio > freqCut & percentUnique <= uniqueCut) | zeroVar)
names(out) <- NULL
if(names){
out <- colnames(x)[out]
}
}
out
}
zeroVar <- function(x)
{
x <- x[,colnames(x) != ".outcome", drop = FALSE]
which(apply(x, 2, function(x) length(unique(x)) < 2))
}
checkConditionalX <- function(x, y)
{
x$.outcome <- y
unique(unlist(dlply(x, .(.outcome), zeroVar)))
}
checkResamples <- function(index, x, y)
{
if(!is.factor(y)) stop("y must be a factor")
if(length(levels(y)) < 2) stop("y must have at least 2 levels")
wrap <- function(index, x, y) checkConditionalX(x[index,,drop=FALSE], y[index])
unique(unlist(lapply(index, wrap, x = x, y = y)))
}
tissue_data <- '/gpfs/projects/bsc83/Projects/GTEx_v8/ManuscriptFinal/02_DEA/Tissues/'
tissue_data <- '~/marenostrum/Projects/GTEx_v8/ManuscriptFinal/02_DEA/Tissues/'
tissue
metadata_tissue=readRDS(paste0(tissue_data,tissue,'/',tissue,'.SampleMetadata.rds' ))
gene_data <- readRDS(paste0(tissue_data,tissue,'/',tissue,'.SampleCountData.rds'))
genes_expressed <- rownames(gene_data)
all_results = list()
#types = c('A3','A5','AF','AL','MX','RI','SE')
#tissues = names(metadata)
#levels of selection : event type , tissue, phenotype
#for (type in types){
#  for (tissue in tissues){
print(type)
type <- 'A3'
#types = c('A3','A5','AF','AL','MX','RI','SE')
#tissues = names(metadata)
#levels of selection : event type , tissue, phenotype
#for (type in types){
#  for (tissue in tissues){
print(type)
print(tissue)
covariates = c('Sex','Age','Ancestry','BMI','Ischemic_Time',
'Autolysis_Score','Collection_Site',
'Exonic_Rate','Cohort','Hardy_Scale','RIN')
phenotypes = c('Sex','Age','Ancestry','BMI')
confounders = c('Ischemic_Time','Autolysis_Score','Collection_Site',
'Exonic_Rate','Cohort','Hardy_Scale','RIN')
### individual example
tmp0 <- read.delim(paste0(SUPPA_path,"/",type,"/",tissue,".psi") )
#metadata_tissue = metadata[metadata$Tissue == tissue,]
metadata_tissue$Sample = gsub('-','.',metadata_tissue$Sample_ID)
cols_interested = c('Sample',covariates,my_pheno)
# RESHUFFLING #
print('reshuffling')
print(reshuffle)
suppressMessages(library(MatchIt))
reshuffle <- 111
samples <- metadata_tissue$Sample_ID
downsample
downsample <- 111
samples_to_keep <- sample(samples, downsample)
#metadata_tissue$Ancestry = sample(metadata_tissue$Ancestry, replace=F)
# metadata_tissue$Height = sample(metadata_tissue$Height, replace=F)
#metadata_tissue <- metadata_tissue[metadata_tissue$Sample_ID %in% c(AFR_samples,EUR_samples),]
metadata_tissue_sub <- metadata_tissue[metadata_tissue$Sample_ID %in% samples_to_keep,]
AFR_samples <- metadata_tissue_sub[metadata_tissue_sub$Ancestry=='AFR']$Sample_ID
metadata_tissue_sub
AFR_samples <- metadata_tissue_sub[metadata_tissue_sub$Ancestry=='AFR',Sample_ID]
AFR_samples <- metadata_tissue_sub[metadata_tissue_sub$Ancestry=='AFR','Sample_ID']
if (length(AFR_samples) < 10) {
quit()
} else {
metadata_tissue <- metadata_tissue_sub
}
metadata_tissue=readRDS(paste0(tissue_data,tissue,'/',tissue,'.SampleMetadata.rds' ))
samples <- metadata_tissue$Sample_ID
samples_to_keep <- sample(samples, downsample)
#metadata_tissue$Ancestry = sample(metadata_tissue$Ancestry, replace=F)
# metadata_tissue$Height = sample(metadata_tissue$Height, replace=F)
#metadata_tissue <- metadata_tissue[metadata_tissue$Sample_ID %in% c(AFR_samples,EUR_samples),]
metadata_tissue_sub <- metadata_tissue[metadata_tissue$Sample_ID %in% samples_to_keep,]
AFR_samples <- metadata_tissue_sub[metadata_tissue_sub$Ancestry=='AFR','Sample_ID']
samples_to_keep <- sample(samples, downsample)
#metadata_tissue$Ancestry = sample(metadata_tissue$Ancestry, replace=F)
# metadata_tissue$Height = sample(metadata_tissue$Height, replace=F)
#metadata_tissue <- metadata_tissue[metadata_tissue$Sample_ID %in% c(AFR_samples,EUR_samples),]
metadata_tissue_sub <- metadata_tissue[metadata_tissue$Sample_ID %in% samples_to_keep,]
AFR_samples <- metadata_tissue_sub[metadata_tissue_sub$Ancestry=='AFR','Sample_ID']
samples_to_keep <- sample(samples, downsample)
#metadata_tissue$Ancestry = sample(metadata_tissue$Ancestry, replace=F)
# metadata_tissue$Height = sample(metadata_tissue$Height, replace=F)
#metadata_tissue <- metadata_tissue[metadata_tissue$Sample_ID %in% c(AFR_samples,EUR_samples),]
metadata_tissue_sub <- metadata_tissue[metadata_tissue$Sample_ID %in% samples_to_keep,]
AFR_samples <- metadata_tissue_sub[metadata_tissue_sub$Ancestry=='AFR','Sample_ID']
if (length(AFR_samples) < 10) {
quit()
} else {
metadata_tissue <- metadata_tissue_sub
}
ribo <- read.table('~/marenostrum/Projects/GTEx_v8/Winona/tables/ribosomal_names.proteins.txt')
View(ribo)
ribo <- read.table('~/marenostrum/Projects/GTEx_v8/Winona/tables/ribosomal_names.proteins.txt', header = T)
View(ribo)
length(ribo$HGNC_symbol)
length(unique(ribo$HGNC_symbol))
length(unique(ribo$HGNC_symbol) %in% DS_specificity$DSG$Var1[DS_specificity$DSG$phenotype == 'Ancestry'])
ancestry <- DS_specificity$DSG$[DS_specificity$DSG$phenotype == 'Ancestry',]
ancestry <- DS_specificity$DSG[DS_specificity$DSG$phenotype == 'Ancestry',]
ancestry[gsub('\\..*','',ancestry$Var1) %in% ribo$EnsemblID,]
nrow(ancestry[gsub('\\..*','',ancestry$Var1) %in% ribo$EnsemblID,])
ribo_ancestry <- ancestry[gsub('\\..*','',ancestry$Var1) %in% ribo$EnsemblID,]
write.table(ribo_ancestry, '~/marenostrum/Projects/GTEx_v8/Winona/tables/ribo_genes_DS.txt', row.names = F, col.names = T, quote = F)
dict <- read.table('~/Downloads/Homo_sapiens_assembly38_noALT_noHLA_noDecoy_ERCC/Homo_sapiens_assembly38_noALT_noHLA_noDecoy_ERCC.fasta')
dict <- read.table('~/Downloads/Homo_sapiens_assembly38_noALT_noHLA_noDecoy_ERCC/Homo_sapiens_assembly38_noALT_noHLA_noDecoy_ERCC.fasta', header = T)
library(ggplot2)
library(robustbase)
Isoforms_path='~/marenostrum/GTEx/data/GTEx_v8_TranscriptCountData/'
TissueInfoFile <- "TissuesInfo.rds"
AnnotationFile <- "gencode.v26.GRCh38.genes.bed"
gtex_path <- '~/marenostrum/Projects/GTEx_v8/ManuscriptFinal/'
dea_path <- '~/marenostrum/Projects/GTEx_v8/ManuscriptFinal/02_DEA/'
ribosomal_pro <- read.table('~/Desktop/Projects/Projects/GTEx_v8/Winona/ribosomal_names.proteins.txt',sep = '\t',header = T)
df_list_TPM = lapply(tissues, function(Tissue) {
print(Tissue)
filename = paste0(Isoforms_path,Tissue,'_TPM.rds')
tissue <- readRDS(filename)
tissue$gene_id <- gsub('\\..*','',tissue$gene_id)
tissue <- as.data.frame(t(tissue[tissue$gene_id == 'ENSG00000140988',]))
tissue
})
df_list_TPM = lapply(tissues, function(Tissue) {
print(Tissue)
filename = paste0(Isoforms_path,Tissue,'_TPM.rds')
tissue <- readRDS(filename)
tissue$gene_id <- gsub('\\..*','',tissue$gene_id)
tissue <- as.data.frame(t(tissue[tissue$gene_id == 'ENSG00000170889',]))
tissue
})
names(df_list_TPM) <- tissues
df_TPM <- do.call("rbind", df_list_TPM)
colnames(df_TPM) <- df_TPM['KidneyCortex.transcript_id',]
df_TPM$tissue <- gsub('\\..*','',rownames(df_TPM))
df_TPM$Sample <- gsub('.*\\.','',rownames(df_TPM))
df_TPM <- df_TPM[df_TPM$Sample != 'gene_id' & df_TPM$Sample != 'transcript_id',]
View(df_TPM)
df_TPM <- do.call("rbind", df_list_TPM)
colnames(df_TPM) <- df_TPM['WholeBlood.transcript_id',]
df_TPM$tissue <- gsub('\\..*','',rownames(df_TPM))
df_TPM$Sample <- gsub('.*\\.','',rownames(df_TPM))
df_TPM <- df_TPM[df_TPM$Sample != 'gene_id' & df_TPM$Sample != 'transcript_id',]
## TPM plot ####
event_tpm <- merge(df_TPM, metadata, by.y = 'Sample_ID', by.x = 'Sample')
metadata <- do.call(rbind.data.frame, metadata)
## TPM plot ####
event_tpm <- merge(df_TPM, metadata, by.y = 'Sample_ID', by.x = 'Sample')
View(event_tpm)
event_tpm$Ancestry <- factor(event_tpm$Ancestry, levels = c("AFR", "EUR"))
cols <- colnames(event_tpm)[grep('ENS',colnames(event_tpm))]
ggplot(event_tpm, aes(x=Ancestry,y=ENST00000391752.5)) + geom_boxplot()
ggplot(event_tpm, aes(x=Ancestry,y=as.numeric(ENST00000391752.5))) + geom_boxplot()
summary(event_tpm[event_tpm$Ancestry=='AFR','ENST00000391752.5'])
event_tpm['ENST00000391752.5'] <- as.numeric(event_tpm['ENST00000391752.5'])
event_tpm['ENST00000391752.5'] <- as.integer(event_tpm['ENST00000391752.5'])
str(event_tpm)
summary(event_tpm[event_tpm$Ancestry=='AFR',as.numeric('ENST00000391752.5')])
# # install MPRAnalyze
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("MPRAnalyze", version = "3.8")
install.packages("RCurl")
BiocManager::install("BiocParallel")
# load the mpranalyze package
library(MPRAnalyze)
library(BiocParallel)
options(MulticoreParam=quote(MulticoreParam(workers=8)))
npar.backend <- bpparam()
dna_counts_depth <- read.table("../../../data/01_counts/mpranalyze_files/dna_counts.for_depth_estimation.mpranalyze.CM.txt", sep="\t", header=TRUE)
setwd('~/marenostrum/Projects/Breast/Hypertension/analysis/01_mpra/02_mpranalyze_quant/')
dna_counts_depth <- read.table("../../../data/01_counts/mpranalyze_files/dna_counts.for_depth_estimation.mpranalyze.CM.txt", sep="\t", header=TRUE)
# since we only have 1 dna replicate -- add another so code doesn't crash (expects matrix)
dna_counts_depth["dna_2"] <- dna_counts_depth["dna_1"]
row.names(dna_counts_depth) <- dna_counts_depth$element
dna_counts_depth <- dna_counts_depth[ , !(names(dna_counts_depth) %in% c("element")), drop=FALSE]
dna_counts_depth <- as.matrix(dna_counts_depth)
rna_counts_depth <- read.table("../../../data/01_counts/mpranalyze_files/rna_counts.for_depth_estimation.mpranalyze.CM.txt", sep="\t", header=TRUE)
row.names(rna_counts_depth) <- rna_counts_depth$element
rna_counts_depth <- rna_counts_depth[ , !(names(rna_counts_depth) %in% c("element")), drop=FALSE]
rna_counts_depth <- as.matrix(rna_counts_depth)
dna_cols_depth <- read.table("../../../data/01_counts/mpranalyze_files/dna_col_ann.for_depth_estimation.mpranalyze.CM.txt", sep="\t", header=TRUE)
names(dna_cols_depth) <- c("id", "condition", "sample")
# add second row to dna_cols_depth
row2 <- data.frame(id="dna_2", condition="dna", sample="2")
dna_cols_depth <- rbind(dna_cols_depth, row2)
row.names(dna_cols_depth) <- dna_cols_depth$id
rna_cols_depth <- read.table("../../../data/01_counts/mpranalyze_files/rna_col_ann.for_depth_estimation.mpranalyze.CM.txt", sep="\t", header=TRUE)
names(rna_cols_depth) <- c("id", "condition", "sample")
row.names(rna_cols_depth) <- rna_cols_depth$id
dna_cols_depth
rna_cols_depth
# make sure everything is a factor
dna_cols_depth$condition <- as.factor(dna_cols_depth$condition)
rna_cols_depth$condition <- as.factor(rna_cols_depth$condition)
rna_cols_depth$sample <- as.factor(rna_cols_depth$sample)
#Load data to model
dna_counts <- read.table("../../../data/01_counts/mpranalyze_files/dna_counts.mpranalyze.for_quantification.CM.txt", sep="\t", header=TRUE)
row.names(dna_counts) <- dna_counts$element
dna_counts <- dna_counts[ , !(names(dna_counts) %in% c("element"))]
dna_counts <- as.matrix(dna_counts)
rna_counts <- read.table("../../../data/01_counts/mpranalyze_files/rna_counts.mpranalyze.for_quantification.CM.txt", sep="\t", header=TRUE)
row.names(rna_counts) <- rna_counts$element
rna_counts <- rna_counts[ , !(names(rna_counts) %in% c("element"))]
rna_counts <- as.matrix(rna_counts)
dna_cols <- read.table("../../../data/01_counts/mpranalyze_files/dna_col_ann.mpranalyze.for_quantification.CM.txt", sep="\t", header=TRUE)
row.names(dna_cols) <- dna_cols$X
rna_cols <- read.table("../../../data/01_counts/mpranalyze_files/rna_col_ann.mpranalyze.for_quantification.CM.txt", sep="\t", header=TRUE)
row.names(rna_cols) <- rna_cols$X
# make sure everything is a factor
dna_cols$barcode <- as.factor(dna_cols$barcode)
rna_cols$barcode <- as.factor(rna_cols$barcode)
dna_cols$sample <- as.factor(dna_cols$sample)
dna_cols$condition <- as.factor(dna_cols$condition)
rna_cols$condition <- as.factor(rna_cols$condition)
ctrls <- read.table("../../../data/01_counts/mpranalyze_files/ctrl_status.mpranalyze.for_quantification.CM.txt", sep="\t", header=TRUE)
ctrls <- as.logical(ctrls$ctrl_status)
# create MPRA object
depth_obj <- MpraObject(dnaCounts = dna_counts_depth, rnaCounts = rna_counts_depth,
dnaAnnot = dna_cols_depth, rnaAnnot = rna_cols_depth)
# estimate depth factors using uq -- here, a sample/condition pair == 1 library
depth_obj <- estimateDepthFactors(depth_obj, lib.factor = c("sample", "condition"),  depth.estimator='uq',
which.lib = "dna")
depth_obj <- estimateDepthFactors(depth_obj, lib.factor = c("id"),
depth.estimator='uq', which.lib = "rna")
rna_depths <- rnaDepth(depth_obj)
rna_depths
rna_cols_depth
# first need to set the dnadepths and rnadepths manually
dna_cols$depth <- rep(1, nrow(dna_cols))
# note 13 will change depending how many barcodes there are per element
rna_cols$depth <- rep(rna_depths, each=25)
rna_cols
# note 13 will change depending how many barcodes there are per element
rna_cols$depth <- rep(rna_depths, each=100)
rna_cols
rna_depths
# create MPRA object
obj <- MpraObject(dnaCounts = dna_counts, rnaCounts = rna_counts,
dnaAnnot = dna_cols, rnaAnnot = rna_cols,
controls = ctrls, BPPARAM = SnowParam(workers=16,type="SOCK"))
# set depth factors manually
obj <- setDepthFactors(obj, dnaDepth = dna_cols$depth, rnaDepth = rna_cols$depth)
# analyze quantification in unpaired DNA library
obj <- analyzeQuantification(obj = obj,
dnaDesign = ~ barcode,
rnaDesign = ~ sample)
alpha <- getAlpha(obj, by.factor = "condition")
head(alpha)
head(alpha[ctrls,])
# test against negative controls
res<- testEmpirical(obj = obj, statistic = alpha$VSMC)
summary(res)
alpha$VSMC_pval <- res$pval.mad
alpha <- getAlpha(obj, by.factor = "condition")
head(alpha)
head(alpha[ctrls,])
# test against negative controls
res<- testEmpirical(obj = obj, statistic = alpha$VSMC)
summary(res)
alpha$CM_pval <- res$pval.mad
head(alpha)
# histogram for negative controls
hist(alpha[ctrls,]$VSMC_pval)
# histogram for negative controls
hist(alpha[ctrls,]$CM_pval)
# histogram for TSSs
hist(alpha[!ctrls,]$VSMC_pval)
# histogram for TSSs
hist(alpha[!ctrls,]$CM_pval)
head(ctrls)
table(ctrls)
ctrls <- read.table("../../../data/01_counts/mpranalyze_files/ctrl_status.mpranalyze.for_quantification.CM.txt", sep="\t", header=TRUE)
ctrls <- as.logical(ctrls$ctrl_status)
table(ctrls)
# create MPRA object
obj <- MpraObject(dnaCounts = dna_counts, rnaCounts = rna_counts,
dnaAnnot = dna_cols, rnaAnnot = rna_cols,
controls = ctrls, BPPARAM = SnowParam(workers=16,type="SOCK"))
# set depth factors manually
obj <- setDepthFactors(obj, dnaDepth = dna_cols$depth, rnaDepth = rna_cols$depth)
# analyze quantification in unpaired DNA library
obj <- analyzeQuantification(obj = obj,
dnaDesign = ~ barcode,
rnaDesign = ~ sample)
alpha <- getAlpha(obj, by.factor = "condition")
head(alpha)
head(alpha[ctrls,])
# test against negative controls
res<- testEmpirical(obj = obj, statistic = alpha$VSMC)
summary(res)
alpha$CM_pval <- res$pval.mad
head(alpha)
# histogram for negative controls
hist(alpha[ctrls,]$CM_pval)
# histogram for TSSs
hist(alpha[!ctrls,]$CM_pval)
# correct for multiple testing
alpha$VSMC_padj <- p.adjust(alpha$VSMC_pval, method = "fdr")
head(alpha)
# correct for multiple testing
alpha$CM_padj <- p.adjust(alpha$CM_pval, method = "fdr")
head(alpha)
hist(alpha[ctrls,]$VSMC_padj)
hist(alpha[ctrls,]$CM_padj)
## 5. Write alphas to file ####
write.table(alpha, file = "../../../data/02_activs/alpha_per_elem.quantification.CM.txt", sep = "\t",
quote = FALSE)
master_list <- read.table('~/Desktop/PhD/master_list.txt', header = T, sep = '\t')
View(master_list)
snps <- read.table('~/Desktop/PhD/filtered_rAggr_SNPs_LD.txt', header = T, sep = '\t')
master_list$snp <- strsplit(master_list$name, "__")[[1]][2]
View(master_list)
master_list$snp <- strsplit(master_list$name, "__")[2]
View(master_list)
master_list$snp <- gsub('_.*','',gsub('.*_','',master_list$name))
View(master_list)
master_list$snp <- gsub('.*__','',gsub('__.*','',master_list$name))
View(master_list)
snp <- strsplit(master_list$name, "__")
snp <- do.call('rbind.data.frame',snp)
View(snp)
master_list$coord <- master_list$snp
master_list$snp <- None
master_list$snp <- NA
View(master_list)
master_list$snp <- NaN
View(master_list)
master_list$snp <- NULL
View(master_list)
colnames(snp) <- c('coord','snp','change')
master_list <- merge(master_list, snp, by = 'coord')
View(snps)
master_list <- merge(master_list, snps, by.x = 'snps', by.y = 'snp_LD')
master_list <- merge(master_list, snps, by.x = 'snp', by.y = 'snp_LD')
View(master_list)
master_list <- read.table('~/Desktop/PhD/master_list.txt', header = T, sep = '\t')
master_list$coord <- gsub('.*__','',gsub('__.*','',master_list$name))
View(master_list)
master_list <- merge(master_list, snp, by = 'coord')
View(master_list)
master_list <- merge(master_list, snps[['snp_LD','SNP1.Name']], by.x = 'snp', by.y = 'snp_LD')
master_list <- merge(master_list, snps[['snp_LD','SNP1.Name']], by.x = 'snp', by.y = 'snp_LD')
master_list <- merge(master_list, snps[c('snp_LD','SNP1.Name')], by.x = 'snp', by.y = 'snp_LD')
View(master_list)
master_list$sentinel <- gsub(':.*','',master_list$SNP1.Name)
View(master_list)
sentinel <- read.table('~/Desktop/PhD/sentinel_snp.txt', header = T, sep = '\t')
View(sentinel)
master_list <- merge(master_list, sentinel[c('rsID','Trait')], by.x = 'sentinel',by.y = 'rsID')
table(master_list$Trait)
1769+1812+975
master_init <- read.table('~/Desktop/PhD/master_list.txt', header = T, sep = '\t')
length(unique(master_init$name))
setdiff(master_init$name, master_list$name)
View(snps)
initial_snps <- read.table('~/Downloads/rAggr_SNPs_LD_p10e-10.txt', sep = '\t', header = T)
View(initial_snps)
initial_snps$sentinel <- gsub(':.*','',initial_snps$SNP1.Name)
View(initial_snps)
master_list <- read.table('~/Desktop/PhD/master_list.txt', header = T, sep = '\t')
master_list$coord <- gsub('.*__','',gsub('__.*','',master_list$name))
master_list$snp <- master_list$name - master_list$coord
master_list<- merge(master_list, snp, by = 'coord')
View(master_list)
master_list <- read.table('~/Desktop/PhD/master_list.txt', header = T, sep = '\t')
master_list$coord <- gsub('.*__','',gsub('__.*','',master_list$name))
snp <- strsplit(master_list$name, "__")
snp <- do.call('rbind.data.frame',snp)
colnames(snp) <- c('coord','snp','change')
master_list <- merge(master_list, snp, by = 'coord')
master_list <- read.table('~/Desktop/PhD/master_list.txt', header = T, sep = '\t')
master_list$coord <- gsub('__.*','',gsub('.*__','',master_list$name))
View(master_list)
master_list <- merge(master_list, snp, by = 'change')
master_list <- read.table('~/Desktop/PhD/master_list.txt', header = T, sep = '\t')
master_list$change <- gsub('__.*','',gsub('.*__','',master_list$name))
master_list <- merge(master_list, snp, by = 'change')
View(master_list)
initial_snps$ld <- gsub(':.*','',initial_snps$SNP2.Name)
View(initial_snps)
'1:11880737:T:C
'
'1:11880737:T:C'
?merge
master_list <- merge(master_list, initial_snps[c('sentinel','Trait','ld')], by.x = 'snp',by.y = 'ld', all.x = TRUE)
master_list <- merge(master_list, initial_snps[c('sentinel','ld')], by.x = 'snp',by.y = 'ld', all.x = TRUE)
master_list[is.na(master_list$sentinel)]
master_list[is.na(master_list$sentinel),]
master_list[is.na(master_list$sentinel),] <- merge(master_list[is.na(master_list$sentinel),] , initial_snps[c('sentinel','SNP2.Name')], by.x = 'snp',by.y = 'SNP2.Name', all.x = TRUE)
sentinel_no_rs <- merge(master_list[is.na(master_list$sentinel),] , initial_snps[c('sentinel','SNP2.Name')], by.x = 'snp',by.y = 'SNP2.Name')
View(sentinel_no_rs)
master_list[master_list$snp %in% sentinel_no_rs$snp,'sentinel']
master_list[master_list$snp %in% sentinel_no_rs$snp]
master_list[master_list$snp %in% sentinel_no_rs$snp,]
master_list[master_list$snp %in% sentinel_no_rs$snp,'sentinel'] <- sentinel_no_rs$sentinel.y
View(master_list)
'1:115259699:C:G' %in% initial_snps$SNP2.Name
master_list[is.na(master_list$sentinel),]
nrow(master_list[is.na(master_list$sentinel),])
head(sentinel)
master_list <- merge(master_list, sentinel[c('rsID','Trait')], by.x = 'sentinel',by.y = 'rsID', all.x = TRUE)
table(master_list$Trait)
1769+1812+975
1794+1827+989
nrow(master_list[is.na(master_list$sentinel),])
write.table(master_list, 'sentinel_trait_ld_snps.txt', quote = F, row.names = F, col.names = T, sep = '\t')
write.table(master_list, '~/Desktop/PhD/sentinel_trait_ld_snps.txt', quote = F, row.names = F, col.names = T, sep = '\t')
master_mod <- read.table('~/Desktop/PhD/sentinel_trait_ld_snps.txt', header = T)
table(master_mod$Trait)
